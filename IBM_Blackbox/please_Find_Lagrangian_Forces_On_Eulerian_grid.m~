%-------------------------------------------------------------------------------------------------------------------%
%
% IB2d is an Immersed Boundary Code (IB) for solving fully coupled non-linear 
% 	fluid-structure interaction models. This version of the code is based off of
%	Peskin's Immersed Boundary Method Paper in Acta Numerica, 2002.
%
% Author: Nicholas A. Battista
% Email:  nick.battista@unc.edu
% Date Created: May 27th, 2015
% Institution: UNC-CH
%
% This code is capable of creating Lagrangian Structures using:
% 	1. Springs
% 	2. Beams (*torsional springs)
% 	3. Target Points
%	4. Muscle-Model (combined Force-Length-Velocity model, "HIll+(Length-Tension)")
%
% One is able to update those Lagrangian Structure parameters, e.g., spring constants, resting %%	lengths, etc
% 
% There are a number of built in Examples, mostly used for teaching purposes. 
% 
% If you would like us %to add a specific muscle model, please let Nick (nick.battista@unc.edu) know.
%
%--------------------------------------------------------------------------------------------------------------------%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% FUNCTION: Computes the components of the force term in Navier-Stokes from
%           deformations of the boundary of the immersed boundary
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


function [Fx, Fy, F_Mass, F_Lag] = please_Find_Lagrangian_Forces_On_Eulerian_grid(dt, current_time, xLag, yLag,xLag_P,yLag_P, x, y, grid_Info, model_Info, springs, targets, beams, muscles, muscles3, masses)

%
% The components of the force are given by
% F(x,y) = int{ f(s) * delta(x - xLag(s)) * delta(y - yLag(s)) * ds }
% 
% where s parameteriizes the Lagrangian structure.

% xLag:         x positions of Lagrangian structure
% yLag:         y positions of Lagrangian structure  
% x:            x positions on Eulerian grid
% y:            y positions on Eulerian grid
% grid_Info:    holds lots of geometric pieces about grid / simulations
% model_Info:   Stores if springs, if update_springs, if target_pts, if update_target_pts (as 0 (no) or 1 (yes) )
% springs:      Stores Master Node, Slave Node, Spring Stiffness, Restling-Lengths, all in column vecs
% beams:        Stores 1st Node, 2nd (MIDDLE-MAIN) Node, 3rd Nodes, Beam Stiffnesses, and Beam curvatures
% targets:      Stores target point index, correponding xLag, yLag and target point stiffness
% masses:       Stores mass point index, correponding xLag, yLag, "spring" stiffness, and mass value parameter
% current_time: Current time of simulation (in seconds)


% Force density is computed using a SIMPLE LINEAR SPRING model w/ resting length L.  
% This leads to a force density of the form,
%               f = ( \LagPts_s * ( 1 - L / abs(\LagPts_s) )  )/ds^2
%

% Grid Info %
Nx =    grid_Info(1); % # of Eulerian pts. in x-direction
Ny =    grid_Info(2); % # of Eulerian pts. in y-direction
Lx =    grid_Info(3); % Length of Eulerian grid in x-coordinate
Ly =    grid_Info(4); % Length of Eulerian grid in y-coordinate
dx =    grid_Info(5); % Spatial-size in x
dy =    grid_Info(6); % Spatial-size in y
supp =  grid_Info(7); % Delta-function support
Nb =    grid_Info(8); % # of Lagrangian pts. 
ds =    grid_Info(9); % Lagrangian spacing


% Model Potential Forces %
springs_Yes = model_Info(1);        % Springs: 0 (for no) or 1 (for yes) 
target_pts_Yes = model_Info(3);     % Target_Pts: 0 (for no) or 1 (for yes)
beams_Yes = model_Info(5);          % Beams: 0 (for no) or 1 (for yes)
muscle_LT_FV_Yes = model_Info(7);   % Length-Tension/Force-Velocity Muscle: 0 (for no) or 1 (for yes) (Length/Tension - Hill Model)
muscle_3
mass_Yes = model_Info(10);          % Mass Pts: 0 (for no) or 1 (for yes)


% Compute MUSCLE ACTIVATION (if using combined length/tension-Hill model) %
if ( muscle_activation == 1)
    [fx_muscles, fy_muscles] = give_Muscle_Force_Densities(Nb,xLag,yLag,xLag_P,yLag_P,muscles,current_time,dt);
else
    fx_muscles = zeros(length(xLag),1);
    fy_muscles = fx_muscles;
end



% Compute SPRING FORCE DENSITIES (if there are springs!)
if ( springs_Yes == 1 )
    
    % Compute "Connections Matrix" for what springs are attached to whom     %
    % (and "Connections Stiffness Matrix" and "Connections Restling Lengths" %
    %connects = give_Me_Spring_Connections_Matrix(Nb,Nsprings,sp_1,sp_2,K_Vec,L_Vec); 
    
    % Compute distances between Lag-Pts w/ Springs for Spring-Tension Calc.
    %dLag_x = give_Spring_Lagrangian_Distance(xLag, Lx, springs);
    %dLag_y = give_Spring_Lagrangian_Distance(yLag, Ly, springs);

    % Compute the Lagrangian SPRING tensions!
    %[Tx Ty] = give_Me_Spring_Lagrangian_Tension(Nb,dLag_x,dLag_y,springs);

    % Compute the Lagrangian SPRING force densities!
    [fx_springs, fy_springs] = give_Me_Spring_Lagrangian_Force_Densities(ds,Nb,xLag,yLag,springs);
    
else
    fx_springs = zeros(Nb,1); %No x-forces coming from springs
    fy_springs = fx_springs;  %No y-forces coming from springs
end



% Compute MASS PT FORCE DENSITIES (if there are mass points!)
if ( mass_Yes == 1)
    % Compute the Lagrangian MASS PT force densities!
    [fx_mass, fy_mass, F_Mass] = give_Me_Mass_Lagrangian_Force_Densities(ds,xLag,yLag,masses); 
else
    fx_mass = zeros(Nb,1); %No x-forces coming from mass points
    fy_mass = fx_mass;     %No y-forces coming from mass points
    F_Mass = 0;            %Dummy to pass along  
end



% Compute TARGET FORCE DENSITIES (if there are target points!)
if ( target_pts_Yes == 1)
    % Compute the Lagrangian TARGET force densities!
    [fx_target, fy_target] = give_Me_Target_Lagrangian_Force_Densities(ds,xLag,yLag,targets); 
    
else
    fx_target = zeros(Nb,1); %No x-forces coming from target points
    fy_target = fx_target;   %No y-forces coming from target points
end




% Compute BEAM FORCE DENSITIES (if there are beams!)
if ( beams_Yes == 1 )

    % Compute the Lagrangian SPRING force densities!
    [fx_beams, fy_beams] = give_Me_Beam_Lagrangian_Force_Densities(ds,Nb,xLag,yLag,beams);
    
else
    fx_beams = zeros(Nb,1); %No x-forces coming from beams
    fy_beams = fx_beams;    %No y-forces coming from beams
end



% SUM TOTAL FORCE DENSITY! %
fx = fx_springs + fx_target + fx_beams + fx_muscles + fx_mass;
fy = fy_springs + fy_target + fy_beams + fy_muscles + fy_mass;

% SAVE LAGRANGIAN FORCES
F_Lag(:,1) = fx;
F_Lag(:,2) = fy;
    
% Give me delta-function approximations!
[delta_X delta_Y] = give_Me_Delta_Function_Approximations_For_Force_Calc(x,y,grid_Info,xLag,yLag);

% Transform the force density vectors into diagonal matrices
fxds = zeros(Nb,Nb); fyds = zeros(Nb,Nb);
for i=1:Nb
   fxds(i,i) = fx(i,1)*ds; 
   fyds(i,i) = fy(i,1)*ds;
end

% Find Eulerian forces on grids by approximating the line integral, 
%       F(x,y) = int{ f(s) delta(x - xLag(s)) delta(y - yLag(s)) ds }
Fx = delta_Y * fxds * delta_X;
Fy = delta_Y * fyds * delta_X;









%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% FUNCTION computes the Lagrangian SPRING Force Densities .
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [fx, fy] = give_Me_Spring_Lagrangian_Force_Densities(ds,Nb,xLag,yLag,springs)

%len = length(Tx(:,1));                % # of Lagrangian Pts.

Nsprings = length(springs(:,1));  % # of Springs
sp_1 = springs(:,1);              % Initialize storage for MASTER NODE Spring Connection
sp_2 = springs(:,2);              % Initialize storage for SLAVE NODE Spring Connection
K_Vec = springs(:,3);             % Stores spring stiffness associated with each spring
RL_Vec = springs(:,4);            % Stores spring resting length associated with each spring

fx = zeros(Nb,1);                 % Initialize storage for x-forces
fy = fx;                          % Initialize storage for y-forces

for i=1:Nsprings
    
    id_Master = sp_1(i);          % Master Node index
    id_Slave = sp_2(i);           % Slave Node index
    k_Spring = K_Vec(i);          % Spring stiffness of i-th spring
    L_r = RL_Vec(i);              % Resting length of i-th spring
    
    dx = xLag(id_Slave) - xLag(id_Master); % x-Distance btwn slave and master node
    dy = yLag(id_Slave) - yLag(id_Master); % y-Distance btwn slave and master node
    
    sF_x = k_Spring * ( sqrt( dx^2 + dy^2 ) - L_r ) * ( dx / sqrt(dx^2+dy^2) );
    sF_y = k_Spring * ( sqrt( dx^2 + dy^2 ) - L_r ) * ( dy / sqrt(dx^2+dy^2) );
    
    fx(id_Master,1) = fx(id_Master,1) + sF_x;  % Sum total forces for node, i in x-direction (this is MASTER node for this spring)
    fy(id_Master,1) = fy(id_Master,1) + sF_y;  % Sum total forces for node, i in y-direction (this is MASTER node for this spring)
    
    fx(id_Slave,1) = fx(id_Slave,1) - sF_x;    % Sum total forces for node, i in x-direction (this is SLAVE node for this spring)
    fy(id_Slave,1) = fy(id_Slave,1) - sF_y;    % Sum total forces for node, i in y-direction (this is SLAVE node for this spring)

    
end

% MIGHT NOT NEED THESE!
%fx = fx/ds^2;
%fy = dy/ds^2;




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% FUNCTION computes the Lagrangian MUSCLE Force Densities .
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [fx,fy] = give_Muscle_Force_Densities(Nb,xLag,yLag,xLag_P,yLag_P,muscles,current_time,dt)


Nmuscles = length(muscles(:,1));  % # of Muscles
m_1 = muscles(:,1);               % Initialize storage for MASTER NODE Muscle Connection
m_2 = muscles(:,2);               % Initialize storage for SLAVE NODE Muscle Connection
LFO_Vec = muscles(:,3);           % Stores length for max. muscle tension
SK_Vec = muscles(:,4);            % Stores muscle constant
a_Vec = muscles(:,5);             % Stores Hill Parameter, a
b_Vec = muscles(:,6);             % Stores Hill Parameter, b
FMAX_Vec = muscles(:,7);          % Stores Force-Maximum for Muscle

fx = zeros(Nb,1);                 % Initialize storage for x-forces
fy = fx;                          % Initialize storage for y-forces

for i=1:Nmuscles
    
    id_Master = m_1(i);          % Master Node index for i-th muscle
    id_Slave = m_2(i);           % Slave Node index for i-th muscle
    LFO = LFO_Vec(i);            % Length for max. muscle tension for i-th muscle
    sk = SK_Vec(i);              % Muscle constant for i-th muscle
    a = a_Vec(i);                % Hill parameter, a, for i-th muscle
    b = b_Vec(i);                % Hill parameter, b, for i-th muscle
    Fmax = FMAX_Vec(i);          % Force-Maximum for i-th muscle
    
    xPt = xLag( id_Master );     % x-Pt of interest at the moment to drive muscle contraction
    
    dx = xLag(id_Slave) - xLag(id_Master); % x-Distance btwn slave and master node
    dy = yLag(id_Slave) - yLag(id_Master); % y-Distance btwn slave and master node
    LF = sqrt( dx^2 + dy^2 );              % Euclidean DISTANCE between master and slave node
    
    
    dx_P = xLag_P(id_Slave) - xLag_P(id_Master); % x-Distance btwn slave and master node
    dy_P = yLag_P(id_Slave) - yLag_P(id_Master); % y-Distance btwn slave and master node
    LF_P = sqrt( dx_P^2 + dy_P^2 );              % Euclidean DISTANCE between master and slave node
    
    v =  abs(LF-LF_P)/dt;        % How fast the muscle is contracting/expanding 

    % Find actual muscle activation magnitude
    Fm = give_Muscle_Activation(v,LF,LFO,sk,a,b,Fmax,current_time,xPt,xLag);
    
    mF_x = Fm*(dx/LF);           % cos(theta) = dx / LF;
    mF_y = Fm*(dy/LF);           % sin(theta) = dy / LF;
    
    fx(id_Master,1) = fx(id_Master,1) + mF_x;  % Sum total forces for node, i in x-direction (this is MASTER node for this spring)
    fy(id_Master,1) = fy(id_Master,1) + mF_y;  % Sum total forces for node, i in y-direction (this is MASTER node for this spring)
    
    fx(id_Slave,1) = fx(id_Slave,1) - mF_x;    % Sum total forces for node, i in x-direction (this is SLAVE node for this spring)
    fy(id_Slave,1) = fy(id_Slave,1) - mF_y;    % Sum total forces for node, i in y-direction (this is SLAVE node for this spring)

    
end








%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% FUNCTION computes the Lagrangian BEAM Force Densities 
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [fx, fy] = give_Me_Beam_Lagrangian_Force_Densities(ds,Nb,xLag,yLag,beams)


Nbeams = length(beams(:,1));     % # of Beams
pts_1 = beams(:,1);              % Initialize storage for 1ST NODE for BEAM
pts_2 = beams(:,2);              % Initialize storage for MIDDLE NODE (2ND Node) for BEAM
pts_3 = beams(:,3);              % Initialize storage for 3RD NODE for BEAM
K_Vec = beams(:,4);              % Stores spring stiffness associated with each spring
C_Vec = beams(:,5);              % Stores spring resting length associated with each spring

fx = zeros(Nb,1);                % Initialize storage for x-forces
fy = fx;                         % Initialize storage for y-forces

for i=1:Nbeams
    
    id_1 = pts_1(i);          % 1ST Node index
    id_2 = pts_2(i);          % (MIDDLE) 2nd Node index -> index that gets force applied to it!
    id_3 = pts_3(i);          % 3RD Node index
    k_Beam = K_Vec(i);        % Beam stiffness of i-th spring
    C = C_Vec(i) ;            % Curvature of the beam between these three nodes 
    
    Xp = xLag(id_1);          % xPt of 1ST Node Pt. in beam
    Xq = xLag(id_2);          % xPt of 2ND (MIDDLE) Node Pt. in beam
    Xr = xLag(id_3);          % xPt of 3RD Node Pt. in beam
    
    Yp = yLag(id_1);          % yPt of 1ST Node Pt. in beam
    Yq = yLag(id_2);          % yPt of 2ND (MIDDLE) Node Pt. in beam
    Yr = yLag(id_3);          % yPt of 3RD Node Pt. in beam
    
    bF_x =  k_Beam * ( (Xr-Xq)*(Yq-Yp) - (Yr-Yq)*(Xq-Xp) - C ) * (  (Yq-Yp) + (Yr-Yq) );
    bF_y = -k_Beam * ( (Xr-Xq)*(Yq-Yp) - (Yr-Yq)*(Xq-Xp) - C ) * (  (Xr-Xq) + (Xq-Xp) );
    
    %bF_x = -k_Beam * ( -(Xr-Xq)*(Yq-Yp) + (Yr-Yq)*(Xq-Xp) - C ) * (  (Yq-Yp) + (Yr-Yq) );
    %bF_y = -k_Beam * ( -(Xr-Xq)*(Yq-Yp) + (Yr-Yq)*(Xq-Xp) - C ) * (  -(Xr-Xq) - (Xq-Xp) );
    
    fx(id_2,1) = fx(id_2,1) + bF_x;  % Sum total forces for middle node, in x-direction (this is MIDDLE node for this beam)
    fy(id_2,1) = fy(id_2,1) + bF_y;  % Sum total forces for middle node, in y-direction (this is MIDDLE node for this beam)
    
    
end


% MIGHT NOT NEED THESE!
%fx = fx/ds^2;
%fy = dy/ds^2;







%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% FUNCTION: computes the Target-Pt Force Densities! 
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [fx_mass, fy_mass, F_Mass] = give_Me_Mass_Lagrangian_Force_Densities(ds,xLag,yLag,masses)

IDs = masses(:,1);                 % Stores Lag-Pt IDs in col vector
xPts= masses(:,2);                 % Original x-Values of x-Mass Pts.
yPts= masses(:,3);                 % Original y-Values of y-Mass Pts.
kStiffs = masses(:,4);             % Stores "spring" stiffness parameter

N_masses = length(IDs);            % # of target points!

fx = zeros(length(xLag),1);         % Initialize storage for x-force density from TARGET PTS
fy = fx;                            % Initialize storage for y-force density from TARGET PTS

for i=1:N_masses
   
    fx(IDs(i),1) = fx(IDs(i),1) + kStiffs(i)*( xPts(i) - xLag(IDs(i)) );
    fy(IDs(i),1) = fy(IDs(i),1) + kStiffs(i)*( yPts(i) - yLag(IDs(i)) ); 
   
end

fx_mass = fx;
fy_mass = fy;

F_Mass(:,1) = fx;  % Store for updating massive boundary pts
F_Mass(:,2) = fy;  % Store for updating massive boundary pts

% MIGHT NOT NEED THESE!
%fx_target = fx/ds^2;
%fy_target = fy/ds^2;








%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% FUNCTION: computes the Target-Pt Force Densities! 
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [fx_target, fy_target] = give_Me_Target_Lagrangian_Force_Densities(ds,xLag,yLag,targets)

IDs = targets(:,1);                 % Stores Lag-Pt IDs in col vector
xPts= targets(:,2);                 % Original x-Values of x-Target Pts.
yPts= targets(:,3);                 % Original y-Values of y-Target Pts.
kStiffs = targets(:,4);             % Stores Target Stiffnesses 

N_targets = length(IDs);            % # of target points!

fx = zeros(length(xLag),1);         % Initialize storage for x-force density from TARGET PTS
fy = fx;                            % Initialize storage for y-force density from TARGET PTS

for i=1:N_targets
   
    fx(IDs(i),1) = fx(IDs(i),1) + kStiffs(i)*( xPts(i) - xLag(IDs(i)) );
    fy(IDs(i),1) = fy(IDs(i),1) + kStiffs(i)*( yPts(i) - yLag(IDs(i)) ); 
   
end

fx_target = fx;
fy_target = fy;

% MIGHT NOT NEED THESE!
%fx_target = fx/ds^2;
%fy_target = fy/ds^2;




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% FUNCTION computes the Delta-Function Approximations 
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [delta_X delta_Y] = give_Me_Delta_Function_Approximations_For_Force_Calc(x,y,grid_Info,xLag,yLag)

% Grid Info
Nx =   grid_Info(1);
Ny =   grid_Info(2);
Lx =   grid_Info(3);
Ly =   grid_Info(4);
dx =   grid_Info(5);
dy =   grid_Info(6);
supp = grid_Info(7);
Nb =   grid_Info(8);

% Find the indices of the points (xi, yj) where the 1D delta functions are non-zero in EULERIAN FRAME
indX = give_1D_NonZero_Delta_Indices(xLag, Nx, dx, supp);
indY = give_1D_NonZero_Delta_Indices(yLag, Ny, dy, supp)';

% Matrix of possible indices, augmented by "supp"-copies to perform subtractions later in LAGRANGIAN FRAME
indLagAux = [1:1:Nb]';
ind_Lag = [];
for i=1:supp
   ind_Lag = [ind_Lag indLagAux]; 
end


% Compute distance between Eulerian Pts. and Lagrangian Pts. by passing correct indices for each
distX = give_Eulerian_Lagrangian_Distance(x(indX),xLag(ind_Lag),Lx);
distY = give_Eulerian_Lagrangian_Distance(y(indY),yLag(ind_Lag'),Ly);


% Initialize delta_X and delta_Y matrices for storing delta-function info for each Lag. Pt.
delta_X = zeros(Nb, Nx);
delta_Y = zeros(Ny, Nb);

delta_1D_x = give_Delta_Kernel(distX, dx);
delta_1D_y = give_Delta_Kernel(distY, dy);


[row,col] = size(ind_Lag);
for i=1:row
    for j=1:col
        
        % Get Eulerian/Lagrangian indices to use for saving non-zero delta-function values
        xID = indX(i,j);
        indy= ind_Lag(i,j);
        yID = indY(j,i);
        
        % Store non-zero delta-function values into delta_X / delta_Y matrices at correct indices!
        delta_X(indy,xID) = delta_1D_x(i,j);
        delta_Y(yID,indy) = delta_1D_y(j,i);
        
    end
end

